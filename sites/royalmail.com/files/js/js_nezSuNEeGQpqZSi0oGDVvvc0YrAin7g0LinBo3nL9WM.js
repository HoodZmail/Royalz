/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
Drupal.debounce = function (func, wait, immediate) {
  var timeout;
  var result;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context = this;
    var later = function later() {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};;
/**
 * @file
 * Attaches behaviors for the Clientside Validation jQuery module.
 */
(function ($, Drupal, debounce, CKEDITOR) {
  /**
   * Attaches jQuery validate behavoir to forms.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *  Attaches the outline behavior to the right context.
   */
  Drupal.behaviors.cvJqueryValidateCKEditor = {
    attach: function (context) {
      if (typeof CKEDITOR === 'undefined') {
        return;
      }
      var ignore = ':hidden';
      var not = [];
      for (var instance in CKEDITOR.instances) {
        if (CKEDITOR.instances.hasOwnProperty(instance)) {
          not.push('#' + instance);
        }
      }
      ignore += not.length ? ':not(' + not.join(', ') + ')' : '';
      $('form').each(function () {
        var validator = $(this).data('validator');
        if (!validator) {
          return;
        }
        validator.settings.ignore = ignore;
        validator.settings.errorPlacement = function(place, $element) {
          var id = $element.attr('id');
          var afterElement = $element[0];
          if (CKEDITOR.instances.hasOwnProperty(id)) {
            afterElement = CKEDITOR.instances[id].container.$;
          }
          place.insertAfter(afterElement);
        };
      });
      var updateText = function (instance) {
        return debounce(function (e) {
          instance.updateElement();
          var event = $.extend(true, {}, e.data.$);
          delete event.target;
          delete event.explicitOriginalTarget;
          delete event.originalTarget;
          delete event.currentTarget;
          $(instance.element.$).trigger(new $.Event(e.name, event));
        }, 250);
      };
      CKEDITOR.on('instanceReady', function () {
        for (var instance in CKEDITOR.instances) {
          if (CKEDITOR.instances.hasOwnProperty(instance)) {
            CKEDITOR.instances[instance].document.on("keyup", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("paste", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("keypress", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("blur", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("change", updateText(CKEDITOR.instances[instance]));
          }
        }
      });
    }
  };
})(jQuery, Drupal, Drupal.debounce, (typeof CKEDITOR === 'undefined') ? undefined : CKEDITOR);
;
/**
 * @file
 * Attaches behaviors for the Clientside Validation jQuery module.
 */
(function ($) {
  // Override clientside validation jquery validation options.
  // We do this to display the error markup same as in inline_form_errors.
  $(document).once('cvjquery').on('cv-jquery-validate-options-update', function (event, options) {
    options.errorElement = 'strong';
    options.showErrors = function(errorMap, errorList) {
      // First remove all errors.
      for (var i in errorList) {
        $(errorList[i].element).parent().find('.form-item--error-message').remove();
      }

      // Show errors using defaultShowErrors().
      this.defaultShowErrors();

      // Wrap all errors with div.form-item--error-message.
      $(this.currentForm).find('strong.error').each(function () {
        if (!$(this).parent().hasClass('form-item--error-message')) {
          $(this).wrap('<div class="form-item--error-message" role="alert"/>');
        }
      });
    };
  });
})(jQuery);
;
/**
 * @file
 * Copied from jquery-validation additional-methods.
 *
 * Adapted to Drupal js coding standards. This allows using a regex pattern
 * for the validation without having to load the 40+ KB of js in
 * additional-methods.js.
 */
(function ($) {
  $.validator.addMethod('pattern', function (value, element, param) {
    if (this.optional(element)) {
      return true;
    }
    if (typeof param === 'string') {
      param = new RegExp('^(?:' + param + ')$');
    }
    return param.test(value);
  }, 'Invalid format.');
})(jQuery);
;
/**
 * @file
 * Provide toggling of Bing search form.
 */

(function ($, Drupal) {

  'use strict';

  Drupal.behaviors.rml_bing_search = {

    attach: function (context, settings) {

      var $searchBlock = $('#block-bingsearch');

      $searchBlock.once('rml_bing_search').each(function () {

        var $menu = $('.menu-item-icon-search');
        $menu.click(function (event) {

          event.preventDefault();

          $searchBlock.toggleClass('visually-hidden');
          $menu.find('.open').toggleClass('visually-hidden');
          $menu.find('.close').toggleClass('visually-hidden');

          // Set focus to Search box while it is visible.
          if (!$searchBlock.hasClass('visually-hidden')) {
            $searchBlock.find('.form-item-keys input').focus();
          }

        });

      });

      var $searchSubmit = $('input[name=Search]');
      $searchSubmit.each(function () {

        var $currentInput = $(this).parent().parent().find('.form-text');

        $(this).click(function (event) {
          // Prevent search if there is no text inside search bar.
          var searchInput = $currentInput.val();
          if (searchInput.length == 0 || searchInput === settings.emptyResultsText) {
            event.preventDefault();
            $currentInput.val(settings.emptyResultsText);
          }
        });
      });

      var $searchInputs = $('input[name=keys]');
      $searchInputs.each(function () {

        var $currentInput = $(this);
        var $closestClearButton = $(this).parent().next('.clear-text-input');

        toggleClearIcon($currentInput, $closestClearButton);
        clearSearchBar($currentInput, $closestClearButton);

        $currentInput.keyup(function () {
          // Check to see if there is text inside the search bar on key entry
          // if so display clear icon.
          toggleClearIcon($currentInput, $closestClearButton);
        });

        $currentInput.focus(function () {
          // Clear search bar while getting focus.
          if ($currentInput.val() != '') {
            $currentInput.val('');
          }
        });

      });

      /**
       * Toggle clear icon display when there is text in search bar.
       *
       * @param object currentInput
       *   Text input object.
       * @param object closestClearButton
       *   Closest clear button within the text input object.
       */
      function toggleClearIcon($currentInput, $closestClearButton) {
        // If there is content in the nearest search input then display cross.
        if ($closestClearButton && $currentInput.val().length > 0) {
          $closestClearButton.addClass('is-visible');
        }
        else {
          $closestClearButton.removeClass('is-visible');
        }

      }

      /**
       * Remove text from search bar when clear icon is clicked.
       *
       * @param object currentInput
       *   Text input object.
       * @param object closestClearButton
       *   Closest clear button within the text input object.
       */
      function clearSearchBar($currentInput, $closestClearButton) {
        // Clear out nearest search input.
        $closestClearButton.click(function () {
          $currentInput.val('');
          $closestClearButton.removeClass('is-visible');
        });
      }

      // Targetting Edge and IE browsers.
      if (navigator.userAgent.search('Edge') >= 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
        var input_ids = $('.menu-item-icon-search, #edit-keys, #edit-keys--2, #edit-track-number');
        searchbox_focus_update(input_ids);

        // On mouseout of Search icon and search box.
        function searchbox_focus_update(input_ids) {
          $(input_ids).mouseout(function () {
            if ($(input_ids).is(':focus')) {
              $(input_ids).blur();
            }
          });
        }
      }
    }
  };
})(jQuery, Drupal);
;
